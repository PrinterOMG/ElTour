import calendar
import datetime

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.misc import callbacks
from tgbot.services.database.models import Country, AuthorTour


account = InlineKeyboardMarkup(row_width=1)
account.add(
    InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data=callbacks.account.new('update_name')),
    InlineKeyboardButton('–í–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=callbacks.account.new('switch_mailing'))
)

cities = InlineKeyboardMarkup(row_width=1)
cities.add(
    InlineKeyboardButton('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', callback_data=callbacks.city_pickup.new('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫')),
    InlineKeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data=callbacks.city_pickup.new('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')),
    InlineKeyboardButton('–ú–æ—Å–∫–≤–∞', callback_data=callbacks.city_pickup.new('–ú–æ—Å–∫–≤–∞'))
)

countries = InlineKeyboardMarkup(row_width=2)
countries.add(
    InlineKeyboardButton('–ê–±—Ö–∞–∑–∏—è', callback_data=callbacks.country_pickup.new('–ê–±—Ö–∞–∑–∏—è')),
    InlineKeyboardButton('–í—å–µ—Ç–Ω–∞–º', callback_data=callbacks.country_pickup.new('–í—å–µ—Ç–Ω–∞–º')),
    InlineKeyboardButton('–ì—Ä–µ—Ü–∏—è', callback_data=callbacks.country_pickup.new('–ì—Ä–µ—Ü–∏—è')),
    InlineKeyboardButton('–ï–≥–∏–ø–µ—Ç', callback_data=callbacks.country_pickup.new('–ï–≥–∏–ø–µ—Ç')),
    InlineKeyboardButton('–ö—É–±–∞', callback_data=callbacks.country_pickup.new('–ö—É–±–∞')),
    InlineKeyboardButton('–ú–∞–ª—å–¥–∏–≤—ã', callback_data=callbacks.country_pickup.new('–ú–∞–ª—å–¥–∏–≤—ã')),
    InlineKeyboardButton('–û–ê–≠', callback_data=callbacks.country_pickup.new('–û–ê–≠')),
    InlineKeyboardButton('–†–æ—Å—Å–∏—è', callback_data=callbacks.country_pickup.new('–†–æ—Å—Å–∏—è')),
    InlineKeyboardButton('–¢–∞–∏–ª–∞–Ω–¥', callback_data=callbacks.country_pickup.new('–¢–∞–∏–ª–∞–Ω–¥')),
    InlineKeyboardButton('–¢—É—Ä—Ü–∏—è', callback_data=callbacks.country_pickup.new('–¢—É—Ä—Ü–∏—è')),
    InlineKeyboardButton('–®—Ä–∏-–õ–∞–Ω–∫–∞', callback_data=callbacks.country_pickup.new('–®—Ä–∏-–õ–∞–Ω–∫–∞'))
)

adults_count = InlineKeyboardMarkup(row_width=4)
adults_count.add(
    InlineKeyboardButton('1', callback_data=callbacks.adults_count.new(1)),
    InlineKeyboardButton('2', callback_data=callbacks.adults_count.new(2)),
    InlineKeyboardButton('3', callback_data=callbacks.adults_count.new(3)),
    InlineKeyboardButton('4', callback_data=callbacks.adults_count.new(4)),
)

kids_count = InlineKeyboardMarkup(row_width=3)
kids_count.row(
    InlineKeyboardButton('–ë–µ–∑ –¥–µ—Ç–µ–π', callback_data=callbacks.kids_count.new(0))
)
kids_count.row(
    InlineKeyboardButton('1', callback_data=callbacks.kids_count.new(1)),
    InlineKeyboardButton('2', callback_data=callbacks.kids_count.new(2)),
    InlineKeyboardButton('3', callback_data=callbacks.kids_count.new(3))
)

kid_age = InlineKeyboardMarkup(row_width=1)
kid_age.add(
    InlineKeyboardButton('0-1 –≥–æ–¥', callback_data=callbacks.kid_age.new('0-1')),
    InlineKeyboardButton('2-11 –ª–µ—Ç', callback_data=callbacks.kid_age.new('2-11')),
    InlineKeyboardButton('12+ –ª–µ—Ç', callback_data=callbacks.kid_age.new('12+'))
)

hotel_stars = InlineKeyboardMarkup(row_width=3)
hotel_stars.add(
    InlineKeyboardButton('‚≠ê', callback_data=callbacks.hotel_stars.new(1)),
    InlineKeyboardButton('‚≠ê‚≠ê', callback_data=callbacks.hotel_stars.new(2)),
    InlineKeyboardButton('‚≠ê‚≠ê‚≠ê', callback_data=callbacks.hotel_stars.new(3)),
    InlineKeyboardButton('‚≠ê‚≠ê‚≠ê‚≠ê', callback_data=callbacks.hotel_stars.new(4)),
    InlineKeyboardButton('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data=callbacks.hotel_stars.new(5))
)

food_type = InlineKeyboardMarkup(row_width=2)
food_type.add(
    InlineKeyboardButton('–õ—é–±–æ–µ', callback_data=callbacks.food_type.new('–õ—é–±–æ–µ')),
    InlineKeyboardButton('–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ', callback_data=callbacks.food_type.new('–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ')),
    InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞–∫', callback_data=callbacks.food_type.new('–ó–∞–≤—Ç—Ä–∞–∫')),
    InlineKeyboardButton('–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω', callback_data=callbacks.food_type.new('–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω')),
    InlineKeyboardButton('–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω', callback_data=callbacks.food_type.new('–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω'))
)

nights_count = InlineKeyboardMarkup(row_width=2)
nights_count.add(
    InlineKeyboardButton('5-7', callback_data=callbacks.nights_count.new('5-7')),
    InlineKeyboardButton('8-10', callback_data=callbacks.nights_count.new('8-10')),
    InlineKeyboardButton('11-13', callback_data=callbacks.nights_count.new('11-13')),
    InlineKeyboardButton('14+', callback_data=callbacks.nights_count.new('14+')),
)


def get_tour_pickup_confirm_keyboard(kids_age_button: bool):
    keyboard = InlineKeyboardMarkup(row_width=1)

    keyboard.add(
        InlineKeyboardButton('‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=callbacks.tour_pickup.new(action='confirm', payload=''))
    )

    keyboard.add(
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data=callbacks.tour_pickup.new(action='update', payload='city')),
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É', callback_data=callbacks.tour_pickup.new(action='update', payload='country')),
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö', callback_data=callbacks.tour_pickup.new(action='update', payload='adults_count')),
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –¥–µ—Ç–µ–π', callback_data=callbacks.tour_pickup.new(action='update', payload='kids_count'))
    )

    if kids_age_button:
        keyboard.add(
            InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π', callback_data=callbacks.tour_pickup.new(action='update', payload='kids_age'))
        )

    keyboard.add(
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–µ–ª—è', callback_data=callbacks.tour_pickup.new(action='update', payload='hotel_stars')),
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è', callback_data=callbacks.tour_pickup.new(action='update', payload='food_type')),
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', callback_data=callbacks.tour_pickup.new(action='update', payload='date')),
        InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –Ω–æ—á–µ–π', callback_data=callbacks.tour_pickup.new(action='update', payload='nights_count')),
    )

    return keyboard


def get_month_keyboard(year: int, month: int):
    months = {
        1: '–Ø–Ω–≤–∞—Ä—å',
        2: '–§–µ–≤—Ä–∞–ª—å',
        3: '–ú–∞—Ä—Ç',
        4: '–ê–ø—Ä–µ–ª—å',
        5: '–ú–∞–π',
        6: '–ò—é–Ω—å',
        7: '–ò—é–ª—å',
        8: '–ê–≤–≥—É—Å—Ç',
        9: '–°–µ–Ω—Ç—è–±—Ä—å',
        10: '–û–∫—Ç—è–±—Ä—å',
        11: '–ù–æ—è–±—Ä—å',
        12: '–î–µ–∫–∞–±—Ä—å'
    }

    first_day, days_in_month = calendar.monthrange(year, month)

    if days_in_month + first_day > 35:
        buttons_count = 42
    else:
        buttons_count = 35

    keyboard = InlineKeyboardMarkup(row_width=7)

    keyboard.row(
        InlineKeyboardButton(f'>>  {months[month]} {year}  <<', callback_data='pass')
    )

    keyboard.row(
        InlineKeyboardButton('–ü–Ω', callback_data='pass'),
        InlineKeyboardButton('–í—Ç', callback_data='pass'),
        InlineKeyboardButton('–°—Ä', callback_data='pass'),
        InlineKeyboardButton('–ß—Ç', callback_data='pass'),
        InlineKeyboardButton('–ü—Ç', callback_data='pass'),
        InlineKeyboardButton('–°–±', callback_data='pass'),
        InlineKeyboardButton('–í—Å', callback_data='pass'),
    )

    buttons = list()
    day_of_month = datetime.datetime(year, month, 1)
    for i in range(buttons_count):
        if i < first_day or day_of_month.month != month:
            buttons.append(InlineKeyboardButton(' ', callback_data='pass'))
        else:
            buttons.append(
                InlineKeyboardButton(str(day_of_month.day), callback_data=callbacks.calendar.new(action='select', value=day_of_month.timestamp()))
            )
            day_of_month = day_of_month + datetime.timedelta(days=1)

    keyboard.add(*buttons)

    if month == 1:
        prev_month = 12
        prev_year = year - 1
    else:
        prev_month = month - 1
        prev_year = year

    next_month = day_of_month.month
    next_year = day_of_month.year

    keyboard.add(
        InlineKeyboardButton(f'<<< {months[prev_month]} {prev_year}', callback_data=callbacks.calendar.new(action='show', value=f'{prev_year} {prev_month}')),
        InlineKeyboardButton(f'{months[next_month]} {next_year} >>>', callback_data=callbacks.calendar.new(action='show', value=f'{next_year} {next_month}'))
    )

    return keyboard


def get_countries_keyboard(countries: list[Country]):
    keyboard = InlineKeyboardMarkup(row_width=1)

    for country in countries:
        keyboard.add(
            InlineKeyboardButton(country.name, callback_data=callbacks.country.new(country.id))
        )

    return keyboard


def get_autor_tours_dates_keyboard(author_tours: list[AuthorTour]):
    keyboard = InlineKeyboardMarkup(row_width=1)

    for author_tour in author_tours:
        btn_text = f'{author_tour.pretty_month()} {author_tour.year}'
        keyboard.add(
            InlineKeyboardButton(btn_text, callback_data=callbacks.author_tour.new(action='show', id=author_tour.id))
        )

    keyboard.add(
        InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='country_choose')
    )

    return keyboard


def get_author_tour_keyboard(author_tour: AuthorTour, landing_url: str):
    keyboard = InlineKeyboardMarkup(row_width=1)

    keyboard.add(
        InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', url=landing_url),
        InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=callbacks.author_tour.new(action='request', id=author_tour.id))
    )

    keyboard.add(
        InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callbacks.country.new(author_tour.country.id))
    )

    return keyboard


def get_support_keyboard(bot_link):
    keyboard = InlineKeyboardMarkup()

    keyboard.add(
        InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', url=bot_link)
    )

    return keyboard
